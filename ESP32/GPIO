-- 06.03.2019 07:04:22 AR V1.0a

block.setSize(101, 21)

generic = {
  parameter = {
    pin = 0,
    mode = 0,
    invert = false,
  },

  refreshPins = function(self)
    if self.parameter.mode <= 2 then
      block.setInputsPinCount(0)
      block.setOutputsPinCount(1)
      block.setOutputPinTypeRestrains(1, 'boolean')
    else
      block.setInputsPinCount(1)
      block.setOutputsPinCount(0)
      block.setInputPinTypeRestrains(1, 'boolean')
    end
  end,

  init = function(self)
    block.needPPVersion(2, 0, 'c')
    generic.refreshPins(self)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'GPIO', [[
Config a pin and get or set the value
    ]])
    local pins = ''
    for i = 1, 40 do
      pins = pins .. 'GPIO' .. (i - 1) .. '\n'
    end
    gui.add('ComboBox', 'ComboBoxPin', 'Pin', pins, {DropDownCount = #pins})
    gui.add('ComboBox', 'ComboBoxMode', 'Mode', [[
      Input
      Input with pullup
      Input with pulldown
      Output
    ]])
    gui.add('CheckBox', 'CheckBoxInvert', 'Invert signal')
    gui.set('ComboBoxPin', 'ItemIndex', self.parameter.pin)
    gui.set('ComboBoxMode', 'ItemIndex', self.parameter.mode)
    gui.set('CheckBoxInvert', 'Checked', self.parameter.invert)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.pin = gui.get('ComboBoxPin', 'ItemIndex')
    self.parameter.mode = gui.get('ComboBoxMode', 'ItemIndex')
    self.parameter.invert = gui.get('CheckBoxInvert', 'Checked')
    generic.refreshPins(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x5E,
      CenterDrawSource = 'draw.setColorA(0.8, 0.8, 0.8) draw.text(0, 0, w, h, "GPIO' .. self.parameter.pin .. '", 4)',
      FillColorSource = '0.36, 0.37, 0.42',
      PinNameColorSource = '1, 1, 1',
    }
  end,

  generate = function(self, remote)
    if not remote then
      return false
    end
    local _, _, group = remote:find('(%w*)')
    if group ~= 'ESP32' then
      return false
    end

    local source =
      [==[
        local block = {}

        block.start = function()
          START
        end

        block.step = function(a)
          STEP
        end

        return block
      ]==]
    local start, step
    if self.parameter.mode <= 2 then
      start = "pio.pin.setdir(pio.INPUT, PIN)"
      if self.parameter.mode == 1 then
        start = start .. " pio.pin.setpull(pio.PULLUP, PIN)"
      elseif self.parameter.mode == 2 then
        start = start .. " pio.pin.setpull(pio.PULLDOWN, PIN)"
      end
      step = "return pio.pin.getval(PIN) == NTRUE"
    else
      start = "pio.pin.setdir(pio.OUTPUT, PIN)"
      step = "pio.pin.setval(a and NTRUE or NFALSE, PIN)"
    end
    do
      local replaces = {
        ['NAME'] = self.name,
        ['PIN'] = 'pio.GPIO' .. self.parameter.pin,
        ['NTRUE'] = self.parameter.invert and '0' or '1',
        ['NFALSE'] = self.parameter.invert and '1' or '0',
      }
      start = string.gsub(start, '%a+', replaces)string.gsub(source, '%a+', replaces)
      step = string.gsub(step, '%a+', replaces)string.gsub(source, '%a+', replaces)
    end
    local replaces = {
      ['NAME'] = self.name,
      ['NTRUE'] = self.parameter.invert and '0' or '1',
      ['NFALSE'] = self.parameter.invert and '1' or '0',
      ['START'] = start,
      ['STEP'] = step,
    }
    return string.gsub(source, '%a+', replaces), block.codeInfo('TargetSpecial', 'Lua53')
  end,

}

